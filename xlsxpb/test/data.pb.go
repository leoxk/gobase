// Code generated by protoc-gen-go.
// source: data.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	data.proto

It has these top-level messages:
	Config
	Range
	Range64
	Table
	AI
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// //////////////////////////////////////////////////////////
type TableType int32

const (
	TableType_Normal TableType = 1
	TableType_Fast   TableType = 2
)

var TableType_name = map[int32]string{
	1: "Normal",
	2: "Fast",
}
var TableType_value = map[string]int32{
	"Normal": 1,
	"Fast":   2,
}

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}
func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (x *TableType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TableType_value, data, "TableType")
	if err != nil {
		return err
	}
	*x = TableType(value)
	return nil
}
func (TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// //////////////////////////////////////////////////////////
type AIType int32

const (
	AIType_Loose AIType = 1
	AIType_Tight AIType = 2
	AIType_Any   AIType = 3
)

var AIType_name = map[int32]string{
	1: "Loose",
	2: "Tight",
	3: "Any",
}
var AIType_value = map[string]int32{
	"Loose": 1,
	"Tight": 2,
	"Any":   3,
}

func (x AIType) Enum() *AIType {
	p := new(AIType)
	*p = x
	return p
}
func (x AIType) String() string {
	return proto.EnumName(AIType_name, int32(x))
}
func (x *AIType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AIType_value, data, "AIType")
	if err != nil {
		return err
	}
	*x = AIType(value)
	return nil
}
func (AIType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Config struct {
	Tables           []*Table `protobuf:"bytes,1,rep,name=Tables" json:"Tables,omitempty"`
	AIs              []*AI    `protobuf:"bytes,2,rep,name=AIs" json:"AIs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *Config) GetAIs() []*AI {
	if m != nil {
		return m.AIs
	}
	return nil
}

type Range struct {
	Min              *int32 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	Max              *int32 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Range) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Range) GetMax() int32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

type Range64 struct {
	Min              *int64 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	Max              *int64 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Range64) Reset()                    { *m = Range64{} }
func (m *Range64) String() string            { return proto.CompactTextString(m) }
func (*Range64) ProtoMessage()               {}
func (*Range64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Range64) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Range64) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

type Table struct {
	RoomType         *TableType `protobuf:"varint,1,opt,name=RoomType,enum=test.TableType" json:"RoomType,omitempty"`
	SmallBlind       *uint64    `protobuf:"varint,2,opt,name=SmallBlind" json:"SmallBlind,omitempty"`
	RoomName         *string    `protobuf:"bytes,3,opt,name=RoomName" json:"RoomName,omitempty"`
	RobotNum         *Range     `protobuf:"bytes,4,opt,name=RobotNum" json:"RobotNum,omitempty"`
	RobotUpdateTime  *uint32    `protobuf:"varint,5,opt,name=RobotUpdateTime" json:"RobotUpdateTime,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Table) GetRoomType() TableType {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return TableType_Normal
}

func (m *Table) GetSmallBlind() uint64 {
	if m != nil && m.SmallBlind != nil {
		return *m.SmallBlind
	}
	return 0
}

func (m *Table) GetRoomName() string {
	if m != nil && m.RoomName != nil {
		return *m.RoomName
	}
	return ""
}

func (m *Table) GetRobotNum() *Range {
	if m != nil {
		return m.RobotNum
	}
	return nil
}

func (m *Table) GetRobotUpdateTime() uint32 {
	if m != nil && m.RobotUpdateTime != nil {
		return *m.RobotUpdateTime
	}
	return 0
}

type AI struct {
	Index            *string `protobuf:"bytes,1,opt,name=Index" json:"Index,omitempty"`
	Type             *AIType `protobuf:"varint,2,opt,name=Type,enum=test.AIType" json:"Type,omitempty"`
	InitAction       *string `protobuf:"bytes,3,opt,name=InitAction" json:"InitAction,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AI) Reset()                    { *m = AI{} }
func (m *AI) String() string            { return proto.CompactTextString(m) }
func (*AI) ProtoMessage()               {}
func (*AI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AI) GetIndex() string {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return ""
}

func (m *AI) GetType() AIType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AIType_Loose
}

func (m *AI) GetInitAction() string {
	if m != nil && m.InitAction != nil {
		return *m.InitAction
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "test.Config")
	proto.RegisterType((*Range)(nil), "test.Range")
	proto.RegisterType((*Range64)(nil), "test.Range64")
	proto.RegisterType((*Table)(nil), "test.Table")
	proto.RegisterType((*AI)(nil), "test.AI")
	proto.RegisterEnum("test.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("test.AIType", AIType_name, AIType_value)
}

var fileDescriptor0 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x49, 0x36, 0x9b, 0x36, 0xd3, 0x7f, 0xff, 0x0d, 0x03, 0x62, 0x50, 0x04, 0x1b, 0x0f,
	0x96, 0x1e, 0x7a, 0x28, 0xe2, 0xc9, 0x4b, 0x2c, 0x08, 0x01, 0xe9, 0xa1, 0xc6, 0x07, 0xd8, 0xda,
	0xb5, 0x2e, 0x24, 0xbb, 0xa5, 0x59, 0xa1, 0x7d, 0x03, 0x1f, 0xdb, 0xc9, 0xc6, 0x6a, 0x6e, 0xbb,
	0xdf, 0xf7, 0xcd, 0xcc, 0x6f, 0x06, 0x60, 0x23, 0xac, 0x98, 0xed, 0xf6, 0xc6, 0x1a, 0x0c, 0xac,
	0xac, 0x6d, 0xfa, 0x00, 0xe1, 0xc2, 0xe8, 0x77, 0xb5, 0xc5, 0x4b, 0x08, 0x0b, 0xb1, 0x2e, 0x65,
	0x9d, 0x78, 0xd7, 0x6c, 0x32, 0x98, 0x0f, 0x66, 0x4d, 0x60, 0xe6, 0x34, 0x3c, 0x03, 0x96, 0xe5,
	0x75, 0xe2, 0x3b, 0xa7, 0xdf, 0x3a, 0x59, 0x9e, 0x8e, 0x81, 0xaf, 0x84, 0xde, 0x4a, 0x1c, 0x00,
	0xab, 0x94, 0xa6, 0x4a, 0x6f, 0xc2, 0xdd, 0x47, 0x1c, 0x28, 0x4c, 0x9f, 0xf4, 0x06, 0x7a, 0x2e,
	0x72, 0x7f, 0xd7, 0x0d, 0xb1, 0x6e, 0x88, 0xa5, 0x5f, 0x1e, 0xf0, 0x76, 0xd0, 0x18, 0xfa, 0x2b,
	0x63, 0xaa, 0xe2, 0xb8, 0x93, 0x2e, 0xf8, 0x7f, 0x3e, 0xea, 0x70, 0x34, 0x32, 0x22, 0xc0, 0x4b,
	0x25, 0xca, 0xf2, 0xb1, 0x54, 0x7a, 0xe3, 0x1a, 0x04, 0x18, 0xb7, 0x65, 0x4b, 0x51, 0xc9, 0x84,
	0x91, 0x12, 0xe1, 0x55, 0xa3, 0xac, 0x8d, 0x5d, 0x7e, 0x56, 0x49, 0x40, 0xca, 0xef, 0x42, 0x2d,
	0xf0, 0x39, 0x8c, 0x9c, 0xfd, 0xba, 0xa3, 0x93, 0xc8, 0x42, 0x51, 0x1d, 0xa7, 0xd4, 0x30, 0x5d,
	0x80, 0x9f, 0xe5, 0x38, 0x04, 0x9e, 0xeb, 0x8d, 0x3c, 0x38, 0x86, 0x08, 0x2f, 0x20, 0x70, 0x44,
	0xbe, 0x23, 0xfa, 0x77, 0xda, 0xff, 0x84, 0x93, 0x6b, 0x65, 0xb3, 0x37, 0xab, 0x8c, 0x6e, 0x87,
	0x4f, 0xc7, 0x10, 0xfd, 0xf1, 0x02, 0x84, 0x4b, 0xb3, 0x27, 0xe2, 0xd8, 0xc3, 0x3e, 0x04, 0x4f,
	0xa2, 0xb6, 0xb1, 0x3f, 0xbd, 0x85, 0xf0, 0xa7, 0x41, 0x04, 0xfc, 0xd9, 0x98, 0x5a, 0x92, 0x4d,
	0xcf, 0x42, 0x6d, 0x3f, 0xc8, 0xc7, 0x1e, 0x5d, 0x5c, 0x1f, 0x63, 0xf6, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x93, 0xdf, 0x93, 0xb4, 0x01, 0x00, 0x00,
}
